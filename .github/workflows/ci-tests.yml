# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See https://github.com/r-lib/actions/tree/master/examples#readme for
# additional example workflows available for the R community.

name: R

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.config.os-name }}-${{ matrix.config.os-version }}
    name: ${{ matrix.config.os-name }}-${{ matrix.config.os-version }} ${{ matrix.config.r}} - java ${{ matrix.config.java}}
    strategy:
      matrix:
        config: 
          - os-name: ubuntu # windows-2019, macos-10.15]
            os-version: "18.04"
            r-version: 4 #, 3.5, 3.6]
            # test against latest update of each major Java version, as well as specific updates of LTS versions:
            java: 15 #  8, 11.0.x,
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - name: remove unwanted preinstalled java
        run: |
          which javah | xargs ls -la
          ls -la /etc/alternatives/javah
          sudo update-alternatives --remove-all javah
          sudo rm -rf /usr/lib/jvm/*
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.config.java }}
          java-package: jdk
      - name: Set up R ${{ matrix.config.r-version }}
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r-version }}
      - name: run javareconf
        run: |
          java -version
          echo java_home:$JAVA_HOME
          echo library paths: $LD_LIBRARY_PATH
          sudo R CMD javareconf JAVA_HOME=$JAVA_HOME
      # - name: Install tinytex
      #   uses: r-lib/actions/setup-tinytex@v1
      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("${{ matrix.config.os-name }}", "${{ matrix.config.os-version }}"))')
      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          FULL_TEST_SUITE: 1
        run: | 
          R CMD build --no-build-vignettes
          ls -la
          ls XLConnect_*.tar.gz | xargs R CMD check --no-manual --as-cran --no-build-vignettes
          
        # run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "error")
        # shell: Rscript {0}
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
