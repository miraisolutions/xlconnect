# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# See https://github.com/r-lib/actions/tree/master/examples#readme for
# additional example workflows available for the R community.

name: R

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '12 23 13,28 * *'

jobs:
  build:
    runs-on: ${{ matrix.config.os-name }}-${{ matrix.config.os-version }}
    name: >- 
      ${{ matrix.config.os-name }}-${{ matrix.config.os-version }}
      R ${{ matrix.config.r-version}} - java ${{ matrix.config.java}}
    strategy:
      matrix:
        config: 
          - os-name: ubuntu # windows-2019, macos-10.15]
            os-version: latest
            r-version: oldrel
            java: 15
            vignettes: true
            xlc-repo: https://jcenter.bintray.com
            timezone-name: Europe/Zurich
          - os-name: ubuntu # windows-2019, macos-10.15]
            os-version: "18.04"
            r-version: release
            java: 11
            vignettes: true
            timezone-name: Asia/Kathmandu
          - os-name: ubuntu # windows-2019, macos-10.15]
            os-version: "18.04"
            r-version: devel
            java: 8
            vignettes: true
            xlc-repo: https://jcenter.bintray.com
            timezone-name: Pacific/Marquesas
          - os-name: macos
            os-version: "10.15"
            r-version: release
            java: 13
            vignettes: false
          - os-name: ubuntu 
            os-version: "16.04"
            r-version: 3.2.5
            java: 8
            vignettes: false
            xlc-repo: https://jcenter.bintray.com
            timezone-name: Canada/Newfoundland
            pkgrepo: https://cran.microsoft.com/snapshot/2017-12-31/
          - os-name: windows # windows-2019, macos-10.15]
            os-version: "2019"
            r-version: release
            java: 11
            vignettes: false
            pkgrepo: "https://cloud.r-project.org"
            timezone-name: "W. Europe Standard Time"
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      XLCONNECT_JAVA_REPO_URL: ${{ matrix.config.xlc-repo }}
      RSPM: ${{ matrix.config.pkgrepo }}

    steps:
      - uses: actions/checkout@v2

      - name: RSPM fallback
        if: matrix.config.pkgrepo == ''
        run: echo 'RSPM=https://cloud.r-project.org' >> $GITHUB_ENV

      - name: Setup java (x86)
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.config.java }}
          java-package: jdk
          architecture: x86
        if: matrix.config.os-name != 'macos'
      
      - name: Setup java (x64)
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.config.java }}
          java-package: jdk
          architecture: x64

      - name: Set up R ${{ matrix.config.r-version }}
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r-version }}

      - name: print effective R version
        run: version
        shell: Rscript {0}

      - name: run javareconf # Yes it actually needs JAVA_HOME=$JAVA_HOME, doesn't use actual env vars (!)
        if: runner.os != 'Windows'
        run: |
          java -version
          echo java_home:$JAVA_HOME
          echo library paths: $LD_LIBRARY_PATH
          sudo R CMD javareconf JAVA_HOME=$JAVA_HOME
      
      - name: effective java version # Yes it actually needs JAVA_HOME=$JAVA_HOME, doesn't use actual env vars (!)
        if: runner.os == 'Windows'
        run: java -version

      - name: Query dependencies
        run: |
          install.packages('remotes', repos=getOption('repos')[['CRAN']])
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}${{matrix.config.pkgrepo}}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install tinytex
        if: matrix.config.vignettes
        uses: r-lib/actions/setup-tinytex@v1

      - name: Install extra Tex packages
        if: matrix.config.vignettes
        run: |
          remotes::install_cran('tinytex', repos=getOption('repos')[['RSPM']])
          library(tinytex)
          tlmgr_install('datetime') 
          tlmgr_install('inputenc')
          tlmgr_install('hyperref')
          tlmgr_install('url')
          tlmgr_install('fmtcount')
          tinytex:::install_yihui_pkgs()
        shell: Rscript {0}

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libcurl4-openssl-dev
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("${{ matrix.config.os-name }}", "${{ matrix.config.os-version }}"))')

      - name: Install dependencies
        run: |
          remotes::install_cran("covr")
          remotes::install_deps(dependencies = TRUE, repos=getOption('repos')[['RSPM']])
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessionInfo()
        shell: Rscript {0}

      - name: set TZ for tests / check
        run: echo 'TZ=${{ matrix.config.timezone-name }}' >> $GITHUB_ENV

      - uses: 'szenius/set-timezone@v1.0'
        if: matrix.config.os-name == 'ubuntu'
        with:
          timezoneLinux: ${{ matrix.config.timezone-name }}
      - uses: 'szenius/set-timezone@v1.0'
        if: matrix.config.os-name == 'macos'
        with:
          timezoneMacos: ${{ matrix.config.timezone-name }}
      - uses: 'szenius/set-timezone@v1.0'
        if: matrix.config.os-name == 'windows'
        with:
          timezoneWindows: ${{ matrix.config.timezone-name }}

      - name: Check without doc
        if: ${{!matrix.config.vignettes}}
        env:
          _R_CHECK_CRAN_INCOMING_: false
          FULL_TEST_SUITE: 1
        run: |-
            check_args <- if("${{matrix.config.os-name}}" == "windows") {
              c("--no-manual", "--no-vignettes", "--no-build-vignettes", "--check-subdirs=no", "--no-multiarch")
            } else {
              c("--no-manual", "--no-vignettes", "--no-build-vignettes", "--check-subdirs=no")
            }
            rcmdcheck::rcmdcheck(args = check_args, build_args=c("--no-build-vignettes"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Check with doc
        if: matrix.config.vignettes
        env:
          _R_CHECK_CRAN_INCOMING_: false
          FULL_TEST_SUITE: 1
        run: >- 
          rcmdcheck::rcmdcheck(args = c("--as-cran"), 
          build_args=c("--compact-vignettes=gs+qpdf"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: run complete test suite # some tests are not run in r check, as test xls(x) files are Rbuild-ignored
        if: always()
        env:
          _R_CHECK_CRAN_INCOMING_: false
          FULL_TEST_SUITE: 1
          RCMDCHECK: "FALSE"
        run: |
         install_opts = if("${{matrix.config.os-name}}" == "windows") {
           c("--no-multiarch")
         } else {
           c()
         }
         install.packages(list.files("./check", pattern = "XLConnect_.*.tar.gz", full.names = TRUE), repos=NULL, type="source", INSTALL_opts=install_opts)
         setwd("tests")
         source("run_tests.R")
        shell: Rscript {0}

      - name: Show test output
        if: always()
        run: | 
          echo $(date)
          cat tests/XLConnect_Unit_Tests.txt || true
          git clean -fd "*xls*"
          grep -i "0 errors, 0 failures" tests/XLConnect_Unit_Tests.txt
        shell: bash

      - name: coverage report
        if: success() && matrix.config.r-version == 'release' && matrix.config.os-name == 'ubuntu'
        run: |
          library(covr)
          covr::codecov(function_exclusions=c("onLoad", "onAttach", "xlcEnsureDependencies", "checkSystemPackage"))
        shell: Rscript {0}
      
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os-name }}${{matrix.config.os-version}}-java${{ matrix.config.java }}-R${{ matrix.config.r-version }}-results
          path: |
            tests/XLConnect_Unit_Tests.*
            check/XLConnect.Rcheck/
            !check/XLConnect.Rcheck/**/*.jar
            !check/XLConnect.Rcheck/00_pkg_src/

      - name: Upload successfully built package
        if: success() && matrix.config.vignettes
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os-name }}${{matrix.config.os-version}}-java${{ matrix.config.java }}-R${{ matrix.config.r-version }}-results
          path: | 
            check/XLConnect_*.tar.gz
